#include <iostream> //cin, cout
#include <fstream> //fin, fout
#include <vector> //vector
#include <utility> //vector of pairs
#include <algorithm> //sort, abs, etc.
#include <string>
#include <math.h>
#define mp make_pair
#define pb push_back
#define limitup 9223372036854775806
#define limitdown -9223372036854775806
#define ll long long
#define loop(a, x, y) for (int a = x; a < y; a++) 
using namespace std;

vector <vector <int> > graph;
vector <bool> track;
vector <pair <int, vector <int> > > firstColors;
vector <int> couldBeFirst;

vector <int> checkInter(int color) {
	vector <int> cool;
	int a = -1, b = -1, c = -1, d = -1;
	int e = -1, f = -1, g = -1, h = -1;
	for (int i = 0; i < graph.size(); i++) {
		for (int j = 0; j < graph[i].size(); j++) {
			if (graph[i][j] == color && a == -1 && b == -1) a = i, b = j;
			if (graph[j][i] == color && c == -1 && d == -1) c = j, d = i;
		}
	}
	int earlyX = min(a, c), earlyY = min(b, d);
	for (int i = graph.size() - 1; i >= 0; i--) {
		for (int j = graph[i].size() - 1; j >= 0; j--) {
			if (graph[i][j] == color && e == -1 && f == -1) e = i, f = j;
			if (graph[j][i] == color && g == -1 && h == -1) g = j, h = i;
		}
	}
	int lateX = max(e, g), lateY = max(f, h);
	for (int i = earlyX; i <= lateX; i++) {
		for (int j = earlyY; j <= lateY; j++) {
			if (graph[i][j] != color) cool.pb(graph[i][j]);
		}
	}
	sort(cool.begin(), cool.end());
	cool.erase(unique(cool.begin(), cool.end()), cool.end());
	return cool;
}

void resiz(int n) {
	graph.resize(n);
	for (int i = 0; i < n; i++) {
		graph[i].resize(n);
	}
}

int main() {
	ifstream cin ("art.in"); ofstream cout ("art.out");
	int n; cin >> n; 
	resiz(n);
	track.resize(10);
	couldBeFirst.resize(10);
	for (int i = 0; i <= 9; i++) {
		track[i] = false;
		couldBeFirst[i] = 0;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			char a; cin >> a;
			int b = a - '0';
			graph[i][j] = b;
			track[graph[i][j]] = true;
		}
	}
	for (int i = 0; i < track.size(); i++) {
		// Find the colors that are actually present
		if (track[i] && i != 0) {
			int color = i;
			firstColors.pb(mp(color, checkInter(color)));
		}
	}
	for (int i = 0; i < firstColors.size(); i++) {
		if (couldBeFirst[firstColors[i].first] != -1) couldBeFirst[firstColors[i].first] = 1;
		for (int j = 0; j < firstColors[i].second.size(); j++) {
			couldBeFirst[firstColors[i].second[j]] = -1;
		}
	}
	int res = 0;
	for (int i = 0; i < couldBeFirst.size(); i++) {	
		if (couldBeFirst[i] == 1) {
			res++;
		}
	}
	cout << res << endl;
}